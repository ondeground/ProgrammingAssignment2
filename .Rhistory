swirl()
install.packages("swirl")
library("swirl")
?rnorm
args("rnorm")
rnorm
lm
lapply
1
a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages(c("slidify","ggplot2","devtools"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GenomicFeatures,"AnnotationDbi""))
biocLite(c("GenomicFeatures","AnnotationDbi))
biocLite(c("GenomicFeatures","AnnotationDbi"))
library(ggplot2)
search()
install.packages("KernSmooth")
library(KernSmooth)
swirl()
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<- c(1.1,9,3.14)
?c()
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
swirl()
exit
swirl()
install.packages("swirl")
library("swirl")
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.file()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
filerename("mytest.R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dircreate("testdir2") file.path("testdir2","testdir3")
dir.create("testdir2") file.path("testdir2","testdir3")
dir.create("testdir2") and file.path("testdir2","testdir3")
dir.create("testdir2"), file.path("testdir2","testdir3")
list.dir()
dir.create("testdir2", file.path("testdir2","testdir3")
)
dir.create("testdir2", TRUE, file.path("testdir2","testdir3"))
info()
dir.create(filepath("testdir","testdir3"),recursive=TRUE)
dir.create(file.path("testdir","testdir3"),recursive=TRUE)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("test.dir",recursive=TRUE)
unlink("testdir",recursive=TRUE)
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files)
old.dir<.getwd()
old.dir<-getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
filerenam("mytest.R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("Mytest2.R","mytest3.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(filepath("testdir2","testdir3"),recursive=TRUE)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("tesdir2",recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
?solve
dir()
getwd("DataScience")
setwd("DataScience")
dir89
dir()
setwd("ProgrammingAssignment2")
ls()
dir()
file.edit("cachematrix:r")
file.edit("cachematrix.R")
?"<--"
?"<<-"
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(3,4,2)
makeVector(3)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(3)
source('~/DataScience/ProgrammingAssignment2/MakeVector.R')
makeVector(5)
cachemean(5,4,6,7)
makeVector(5,6,4)
makeVector(c(3,4,5))
args(makeVector)
args(numeric)
args(args)
makeVector(x=c(1,2,3,))
m<-makeVector(c(3,4,5))
cachemean(m)
m<-makeVector(c(3,4,5,6,6,6,6,644))
cachemean(m)
matrix()
args(matrix)
a<-makeVector(c(1,2,3,4))
a$get()
a$getmean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$get
a$get()
a$setmean(0)
a$getmean()
a$get()
cachemean()
cachemean(a)
install.packages("devtools")
devtools::install_github(c("rstudio/rmarkdown", "hadley/bookdown", "hadley/lineprof"))
install.packages(c("inline", "pryr", "microbenchmark", "dplyr", "png", "knitr"))
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
rm(f)
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
rm(x,g)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x,h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j,k)
l <- function(x) x + 1
m <- function() {
l <- function(x) x * 2
l(10)
}
l()
l(2)
m(2)
m()
rm(l,m)
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
rm(j)
a
rm(a)
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
rm(j)
codetools::findGlobals(makeVector)
c(c=c)
c<-10
c(c=c)
f <- function(x) {
f <- function(x) {
f <- function(x) {
x ^ 2
}
f(x) + 1
}
f(x) * 2
}
f(10)
`(` <- function(e1) {
if (is.numeric(e1) && runif(1) < 0.1) {
e1 + 1
} else {
e1
}
}
replicate(50, (1 + 2))
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
1+2
`(` <- function(e1) {
if (is.numeric(e1) && runif(1) < 0.1) {
e1 + 1
} else {
e1
}
}
replicate(20, (1 + 2))
rm("(")
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
j()
a<-1
j()
j()
j()
j()
a<-4
j()
rm(f,j)
runif
?runif
mean(x = 1:10)
rm(a,c)
mean(1:10)
g <- function(a = 1, b = a * 2) {
c(a, b)
}
g(8)
(8,3)
(9)
g(9)
g(9,9)
g
rm(g)
sample(replace = TRUE, 20, x = c(1:10, NA))
c
?c
x=(1:10,NA)
x=c(1:10,NA)
x
x
?sample
sample(replace = TRUE, 20, x = c(1:10, NA))
sample(replace = TRUE, 20, x = c(1:10, NA))
sample(replace = TRUE, 20, x = c(1:10, NA))
replicate(5,sample(replace = TRUE, 20, x = c(1:10, NA)))
replicate(5,sample(replace = TRUE, 20, x = c(1:10, NA)))
source('~/DataScience/ProgrammingAssignment2/MakeVector.R')
